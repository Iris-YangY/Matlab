function test_ising_1(parameter);

na=0;
if (nargin<1+na); parameter=[]; end; na=na+1;

if isempty(parameter); parameter = struct('type','parameter'); end;
%%%%;
if (~isfield(parameter,'zzz')); parameter.zzz=0; end;
zzz = parameter.zzz;
%%%%;
if (~isfield(parameter,'flag_lattice_hex_vs_car')); parameter.flag_lattice_hex_vs_car=0; end;%0 for square and 1 for hexagon
flag_lattice_hex_vs_car = parameter.flag_lattice_hex_vs_car;
%%%%;
if (~isfield(parameter,'n_x')); parameter.n_x=192; end;% 192*192 squares on each side on the chessboard
n_x = parameter.n_x;
%%%%;
if (~isfield(parameter,'beta')); parameter.beta=0.8; end;% beta = 0.2, 0.8, 0.05
beta = parameter.beta;
%%%%;
if (~isfield(parameter,'h_ext')); parameter.h_ext=+0.0; end;
h_ext = parameter.h_ext;
%%%%;
if (~isfield(parameter,'h_int')); parameter.h_int=+1.0; end;
h_int = parameter.h_int;
%%%%;
if (~isfield(parameter,'n_t')); parameter.n_t=128; end;% time-steps
n_t = parameter.n_t;
%%%%;
if (~isfield(parameter,'n_t_plot')); parameter.n_t_plot=1; end;
n_t_plot = parameter.n_t_plot;
%%%%;
if (~isfield(parameter,'rseed')); parameter.rseed=0; end;
rseed = parameter.rseed;
%%%%;

if (beta<=0); beta = 1e-12; end;
if (n_t< 0); n_t = 0; end;

if flag_lattice_hex_vs_car==0;
n_neighbor = 4;
n_y = n_x;
n_point = n_x*n_y;
point_x_ = zeros(n_point,1);
point_y_ = zeros(n_point,1);
patch_x__ = zeros(n_neighbor,n_point);
patch_y__ = zeros(n_neighbor,n_point);
index_neighbor_row_ = zeros(n_neighbor*n_point,1);
index_neighbor_col_ = zeros(n_neighbor*n_point,1);
na=0;nn=0;
for ny=0:n_y-1;
nyp1 = ny+1; if (nyp1>=n_y); nyp1 = nyp1 - n_y; end;
nyn1 = ny-1; if (nyn1<   0); nyn1 = nyn1 + n_y; end;
for nx=0:n_x-1;
nxp1 = nx+1; if (nxp1>=n_x); nxp1 = nxp1 - n_x; end;
nxn1 = nx-1; if (nxn1<   0); nxn1 = nxn1 + n_x; end;
tab_c00 = nx   + ny  *n_x;
tab_cp0 = nxp1 + ny  *n_x;
tab_cn0 = nxn1 + ny  *n_x;
tab_c0p = nx   + nyp1*n_x;
tab_c0n = nx   + nyn1*n_x;
assert(tab_c00==na);
point_x_(1+tab_c00) = nx  ;
point_y_(1+tab_c00) = ny  ;
patch_x__(1+nn+0) = point_x_(1+tab_c00) + sqrt(0.5)*cos(2*pi*(0+0.5)/4); patch_y__(1+nn+0) = point_y_(1+tab_c00) + sqrt(0.5)*sin(2*pi*(0+0.5)/4);
patch_x__(1+nn+1) = point_x_(1+tab_c00) + sqrt(0.5)*cos(2*pi*(1+0.5)/4); patch_y__(1+nn+1) = point_y_(1+tab_c00) + sqrt(0.5)*sin(2*pi*(1+0.5)/4);
patch_x__(1+nn+2) = point_x_(1+tab_c00) + sqrt(0.5)*cos(2*pi*(2+0.5)/4); patch_y__(1+nn+2) = point_y_(1+tab_c00) + sqrt(0.5)*sin(2*pi*(2+0.5)/4);
patch_x__(1+nn+3) = point_x_(1+tab_c00) + sqrt(0.5)*cos(2*pi*(3+0.5)/4); patch_y__(1+nn+3) = point_y_(1+tab_c00) + sqrt(0.5)*sin(2*pi*(3+0.5)/4);
index_neighbor_row_(1+nn) = tab_c00; index_neighbor_col_(1+nn) = tab_cp0;
nn=nn+1;
index_neighbor_row_(1+nn) = tab_c00; index_neighbor_col_(1+nn) = tab_c0p;
nn=nn+1;
index_neighbor_row_(1+nn) = tab_c00; index_neighbor_col_(1+nn) = tab_cn0;
nn=nn+1;
index_neighbor_row_(1+nn) = tab_c00; index_neighbor_col_(1+nn) = tab_c0n;
nn=nn+1;
na=na+1;
end;%for nx=0:n_x-1;
end;%for ny=0:n_y-1;
end;%if flag_lattice_hex_vs_car==0;
%%%%%%%%;
if flag_lattice_hex_vs_car==1;
dydx = sin(pi/3);
n_neighbor = 6;
n_y = ceil(n_x/dydx); n_y = n_y+mod(n_y,2); %<-- ensure n_y is even. ;
n_point = n_x*n_y;
point_x_ = zeros(n_point,1);
point_y_ = zeros(n_point,1);
patch_x__ = zeros(n_neighbor,n_point);
patch_y__ = zeros(n_neighbor,n_point);
index_neighbor_row_ = zeros(n_neighbor*n_point,1);
index_neighbor_col_ = zeros(n_neighbor*n_point,1);
na=0;nn=0;
for ny=0:n_y-1;
nyp1 = ny+1; if (nyp1>=n_y); nyp1 = nyp1 - n_y; end;
nyn1 = ny-1; if (nyn1<   0); nyn1 = nyn1 + n_y; end;
for nx=0:n_x-1;
nxp1 = nx+1; if (nxp1>=n_x); nxp1 = nxp1 - n_x; end;
nxn1 = nx-1; if (nxn1<   0); nxn1 = nxn1 + n_x; end;
tab_c00 = nx   + ny  *n_x;
tab_cp0 = nxp1 + ny  *n_x;
tab_cpp = nxp1 + nyp1*n_x;
tab_c0p = nx   + nyp1*n_x;
tab_cnp = nxn1 + nyp1*n_x;
tab_cn0 = nxn1 + ny  *n_x;
tab_cnn = nxn1 + nyn1*n_x;
tab_c0n = nx   + nyn1*n_x;
tab_cpn = nxp1 + nyn1*n_x;
assert(tab_c00==na);
point_x00 = nx   + mod(ny  ,2)/2; point_y00 = ny  *dydx;
point_xp0 = nxp1 + mod(ny  ,2)/2; point_yp0 = ny  *dydx;
point_xpp = nxp1 + mod(nyp1,2)/2; point_ypp = nyp1*dydx;
point_x0p = nx   + mod(nyp1,2)/2; point_y0p = nyp1*dydx;
point_xnp = nxn1 + mod(nyp1,2)/2; point_ynp = nyp1*dydx;
point_xn0 = nxn1 + mod(ny  ,2)/2; point_yn0 = ny  *dydx;
point_xnn = nxn1 + mod(nyn1,2)/2; point_ynn = nyn1*dydx;
point_x0n = nx   + mod(nyn1,2)/2; point_y0n = nyn1*dydx;
point_xpn = nxp1 + mod(nyn1,2)/2; point_ypn = nyn1*dydx;
point_x_(1+tab_c00) = nx + mod(ny,2)/2 ;
point_y_(1+tab_c00) = ny*dydx ;
patch_x__(1+nn+0) = point_x_(1+tab_c00) + sqrt(1/3)*cos(2*pi*(0+0.5)/6); patch_y__(1+nn+0) = point_y_(1+tab_c00) + sqrt(1/3)*sin(2*pi*(0+0.5)/6);
patch_x__(1+nn+1) = point_x_(1+tab_c00) + sqrt(1/3)*cos(2*pi*(1+0.5)/6); patch_y__(1+nn+1) = point_y_(1+tab_c00) + sqrt(1/3)*sin(2*pi*(1+0.5)/6);
patch_x__(1+nn+2) = point_x_(1+tab_c00) + sqrt(1/3)*cos(2*pi*(2+0.5)/6); patch_y__(1+nn+2) = point_y_(1+tab_c00) + sqrt(1/3)*sin(2*pi*(2+0.5)/6);
patch_x__(1+nn+3) = point_x_(1+tab_c00) + sqrt(1/3)*cos(2*pi*(3+0.5)/6); patch_y__(1+nn+3) = point_y_(1+tab_c00) + sqrt(1/3)*sin(2*pi*(3+0.5)/6);
patch_x__(1+nn+4) = point_x_(1+tab_c00) + sqrt(1/3)*cos(2*pi*(4+0.5)/6); patch_y__(1+nn+4) = point_y_(1+tab_c00) + sqrt(1/3)*sin(2*pi*(4+0.5)/6);
patch_x__(1+nn+5) = point_x_(1+tab_c00) + sqrt(1/3)*cos(2*pi*(5+0.5)/6); patch_y__(1+nn+5) = point_y_(1+tab_c00) + sqrt(1/3)*sin(2*pi*(5+0.5)/6);
index_neighbor_row_(1+nn) = tab_c00; index_neighbor_col_(1+nn) = tab_cp0;
nn=nn+1;
index_neighbor_row_(1+nn) = tab_c00; index_neighbor_col_(1+nn) = tab_cn0;
nn=nn+1;
index_neighbor_row_(1+nn) = tab_c00; index_neighbor_col_(1+nn) = tab_c0p;
nn=nn+1;
index_neighbor_row_(1+nn) = tab_c00; index_neighbor_col_(1+nn) = tab_c0n;
nn=nn+1;
if (mod(ny,2)==0);
index_neighbor_row_(1+nn) = tab_c00; index_neighbor_col_(1+nn) = tab_cnp;
nn=nn+1;
index_neighbor_row_(1+nn) = tab_c00; index_neighbor_col_(1+nn) = tab_cnn;
nn=nn+1;
end;%if (mod(ny,2)==0);
if (mod(ny,2)==1);
index_neighbor_row_(1+nn) = tab_c00; index_neighbor_col_(1+nn) = tab_cpp;
nn=nn+1;
index_neighbor_row_(1+nn) = tab_c00; index_neighbor_col_(1+nn) = tab_cpn;
nn=nn+1;
end;%if (mod(ny,2)==1);
na=na+1;
end;%for nx=0:n_x-1;
end;%for ny=0:n_y-1;
end;%if flag_lattice_hex_vs_car==1;
%%%%%%%%;
neighbor__ = sparse(1+index_neighbor_row_,1+index_neighbor_col_,1,n_point,n_point);
index_neighbor_nc__ = zeros(n_neighbor,n_point);
tmp_t = tic;
for npoint=0:n_point-1;
%tmp_index_ = find(neighbor__(1+npoint,:)) - 1; %<-- slow. ;
tmp_index_ = find(neighbor__(:,1+npoint)) - 1; %<-- fast. ;
index_neighbor_nc__(:,1+npoint) = tmp_index_;
end;%for npoint=0:n_point-1;
tmp_t = toc(tmp_t); disp(sprintf(' %% access sparse: %0.6fs',tmp_t));
%%%%%%%%;

flag_plot=0;
if flag_plot;
tmp_x__ = reshape(point_x_(1+index_neighbor_col_),[n_neighbor,n_point]);
tmp_y__ = reshape(point_y_(1+index_neighbor_col_),[n_neighbor,n_point]);
figure(1);clf;set(gcf,'Position',1+[0,0,1024,1024]);
markersize_use = 4;
markersize_big = 8;
linewidth_use = 1;
for npoint=0:n_point-1;
clf;
hold on;
plot(point_x_,point_y_,'o','MarkerEdgeColor','k','MarkerFaceColor',0.65*[1,1,1],'MarkerSize',markersize_use);
plot(tmp_x__(:,1+npoint),tmp_y__(:,1+npoint),'h','MarkerEdgeColor','k','MarkerFaceColor','r','MarkerSize',markersize_big);
hold off;
xlabel('x'); ylabel('y');
title(sprintf('npoint %d',npoint));
axis equal;
pause(0.1);
drawnow();
end;%for npoint=0:n_point-1;
end;%if flag_plot;

c_123___ = zeros(1,2,3);
c_123___(1,1+0,:) = [1,0,1];
c_123___(1,1+1,:) = [0,1,1];
rng(rseed);
spin_ = 2*(rand(n_point,1)>0.5)-1;
flag_plot=1;
if flag_plot;
figure(1);clf;set(gcf,'Position',1+[0,0,1024,1024]);
end;%if flag_plot;
for nt=0:n_t-1;
e_same_ = - (h_int*(+spin_.*(neighbor__*spin_)) + h_ext*spin_);
e_flip_ = - (h_int*(-spin_.*(neighbor__*spin_)) - h_ext*spin_);
p_same_ = exp(-beta*e_same_);
p_flip_ = exp(-beta*e_flip_);
p_pick_ = p_flip_./(p_same_ + p_flip_);
%index_upd_ = find(e_flip_<e_same_)-1; %<-- zero temperature limit. ;
index_upd_ = find(rand(n_point,1)< p_pick_) - 1;
spin_(1+index_upd_) = -spin_(1+index_upd_);
if (mod(nt,n_t_plot)==0);
if flag_plot;
clf;
patch(patch_x__,patch_y__,c_123___(1,1+(spin_>0),:),'LineStyle','none');
axis image; 
%axis notick;
xlabel('x'); ylabel('y');
title(sprintf('nt %d; beta %0.2f',nt,beta),'Interpreter','none');
axis equal;
drawnow();
end;%if flag_plot;
end;%if (mod(nt,n_t_plot)==0);
end;%for nt=0:n_t-1;
