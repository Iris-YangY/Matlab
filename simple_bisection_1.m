function simple_bisection_1(); %<-- an 'explicit' function that we can call from the matlab command prompt. ;
% Matlab does not allow functions to be defined within scripts (i.e., m-files). ;
% Below we try and find a root of f(x), so x refers to the horizontal position, and y to the vertical. ;
exactvalue = 81^(1/10);
error = 0;
n_iteration = 30; %<-- maximum iteration number. Ideally this would be determined adaptively. ;
a = 0; %<-- initial left-endpoint. ;
c = 81; %<-- initial right-endpoint. ;
x_values = linspace(a,c,1024); %<-- define multiple horizontal positions. ;
y_values = function_f(x_values); %<-- perform multiple function-evaluations (this is what we want to avoid with bisection). ;
figure(1);clf; %<-- initialize our plot. ;
subplot(1,2,1);
plot(x_values,y_values,'k-'); xlim([a,c]); ylim([-3,4]); %<-- now we plot all those function-evaluations so we can look at the graph. ;
xlabel('x'); ylabel('y');
c_ = colormap('spring'); n_c = size(c_,1);
hold on;
l=line([a,c],[0,0]); set(l,'Color','k','LineWidth',1);
hold off;
% Now we step through several iterations of bisection. ;
for niteration = 0:n_iteration-1;
b = (a+c)/2; %<-- define the midpoint of the current interval. ;
fa = function_f(a); %<-- we evaluate the function at the left. ;
fb = function_f(b); %<-- we evaluate the function at the middle. ;
fc = function_f(c); %<-- we evaluate the function at the right. ;

if (fa*fb<0); c=b; 
elseif (fa*fc<0); a=b; 
end; %<-- decide which subinterval to focus on. ;
nc = round(max(1,min(n_c,n_c*(niteration/n_iteration)))); %<-- pick a color based on the iteration number. ;
subplot(1,2,1);
hold on;
l=line([b,b],[-3,4]); set(l,'Color',c_(nc,:),'LineWidth',2); %<-- draw a vertical line at the midpoint of the current interval. ;
hold off;
subplot(1,2,2);
hold on;
plot(niteration,fb,'ko');
plot(niteration,abs(c-a)/2,'ro');
xlim([0,n_iteration-1]);
grid on;
xlabel('iteration'); ylabel('error');
hold off;
sgtitle(sprintf('hit space to see iteration %d/%d: blue --> red',niteration,n_iteration));
pause();
end;%for niteration = 0:n_iteration-1;

function output_y = function_f(input_x); %<-- another 'explicit' function that we are declaring here, and will call above. ;
% we could simply have defined this using the inline syntax: ;
% e.g., function_f = @(x) 3 - x.^2 + x ;
% output_y = 3 - input_x.^2 + input_x;
%output_y = 3 - input_x.^2 + input_x + 0.25*cos(2*pi*input_x*2);
% output_y = 2*(input_x > sqrt(2)) - 1;
 output_y = input_x.^10-81;